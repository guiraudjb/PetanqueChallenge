function init(self)
	msg.post(".", "acquire_input_focus")
	self.Exit = gui.get_node("Exit")
	self.Touche = gui.get_node("Touche")
	self.Rate = gui.get_node("Rate")
	self.activeplayercolor=vmath.vector4(0,039, 0.72, 0.89, 1)
	self.waitingPlayerColor=vmath.vector4(1, 1, 1, 0.5)
	self.scoreP1 = gui.get_node("scoreP1")
	self.scoreP2 = gui.get_node("scoreP2")
	self.scoreP3 = gui.get_node("scoreP3")
	self.scoreP4 = gui.get_node("scoreP4")
	self.scoreP5 = gui.get_node("scoreP5")
	self.scoreP6 = gui.get_node("scoreP6")
	self.LabelJ1 = gui.get_node("LabelJ1")
	self.LabelJ2 = gui.get_node("LabelJ2")
	self.LabelJ3 = gui.get_node("LabelJ3")
	self.LabelJ4 = gui.get_node("LabelJ4")
	self.LabelJ5 = gui.get_node("LabelJ5")
	self.LabelJ6 = gui.get_node("LabelJ6")
	self.LabelJ6 = gui.get_node("LabelJ6")
	self.scoreP1Text = gui.get_node("scoreP1Text")
	self.scoreP2Text = gui.get_node("scoreP2Text")
	self.scoreP3Text = gui.get_node("scoreP3Text")
	self.scoreP4Text = gui.get_node("scoreP4Text")
	self.scoreP5Text = gui.get_node("scoreP5Text")
	self.scoreP6Text = gui.get_node("scoreP6Text")
	self.Reste = gui.get_node("Reste")
	self.Tour = gui.get_node("TourNumber")
	if NumberPlayer == 1 then
		gui.set_enabled(self.scoreP6, false)
		gui.set_enabled(self.scoreP5, false)
		gui.set_enabled(self.scoreP4, false)
		gui.set_enabled(self.scoreP3, false)
		gui.set_enabled(self.scoreP2, false)
		gui.set_enabled(self.LabelJ6, false)
		gui.set_enabled(self.LabelJ5, false)
		gui.set_enabled(self.LabelJ4, false)
		gui.set_enabled(self.LabelJ3, false)
		gui.set_enabled(self.LabelJ2, false)
	end
	if NumberPlayer == 2 then
		gui.set_enabled(self.scoreP6, false)
		gui.set_enabled(self.scoreP5, false)
		gui.set_enabled(self.scoreP4, false)
		gui.set_enabled(self.scoreP3, false)
		gui.set_enabled(self.LabelJ6, false)
		gui.set_enabled(self.LabelJ5, false)
		gui.set_enabled(self.LabelJ4, false)
		gui.set_enabled(self.LabelJ3, false)
	end
	if NumberPlayer == 3 then
		gui.set_enabled(self.scoreP6, false)
		gui.set_enabled(self.scoreP5, false)
		gui.set_enabled(self.scoreP4, false)
		gui.set_enabled(self.LabelJ6, false)
		gui.set_enabled(self.LabelJ5, false)
		gui.set_enabled(self.LabelJ4, false)
	end
	if NumberPlayer == 4 then
		gui.set_enabled(self.scoreP6, false)
		gui.set_enabled(self.scoreP5, false)
		gui.set_enabled(self.LabelJ6, false)
		gui.set_enabled(self.LabelJ5, false)
	end
	if NumberPlayer == 5 then
		gui.set_enabled(self.scoreP6, false)
		gui.set_enabled(self.LabelJ6, false)
	end
	
end


function updateShotLeft(self)
	if reste == 3 then
		gui.play_flipbook(self.Reste, hash("reste3"))
	end
	if reste == 2 then
		gui.play_flipbook(self.Reste, hash("reste2"))
	end
	if reste == 1 then
		gui.play_flipbook(self.Reste, hash("reste1"))
	end

end


local function playclick()
	if SoundVolume == true then
		sound.play("ClickSound#Click")
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	gui.set_text(self.scoreP1Text, scorejoueurs[1])
	gui.set_text(self.scoreP2Text, scorejoueurs[2])
	gui.set_text(self.scoreP3Text, scorejoueurs[3])
	gui.set_text(self.scoreP4Text, scorejoueurs[4])
	gui.set_text(self.scoreP5Text, scorejoueurs[5])
	gui.set_text(self.scoreP6Text, scorejoueurs[6])
	gui.set_text(self.Tour, tour)
	updateguivalues(self)



	
	updateShotLeft(self)
end

function updateguivalues(self)

	if NumberPlayer == 1 then
		gui.set_color(self.LabelJ1, self.activeplayercolor)
		gui.set_color(self.scoreP1, self.activeplayercolor)
	end
	if NumberPlayer == 2 then
		gui.set_color(self.LabelJ1, self.waitingPlayerColor)
		gui.set_color(self.scoreP1, self.waitingPlayerColor)
		gui.set_color(self.LabelJ2, self.waitingPlayerColor)
		gui.set_color(self.scoreP2, self.waitingPlayerColor)
	end
	if NumberPlayer == 3 then
		gui.set_color(self.LabelJ1, self.waitingPlayerColor)
		gui.set_color(self.scoreP1, self.waitingPlayerColor)
		gui.set_color(self.LabelJ2, self.waitingPlayerColor)
		gui.set_color(self.scoreP2, self.waitingPlayerColor)
		gui.set_color(self.LabelJ3, self.waitingPlayerColor)
		gui.set_color(self.scoreP3, self.waitingPlayerColor)
	end
	if NumberPlayer == 4 then
		gui.set_color(self.LabelJ1, self.waitingPlayerColor)
		gui.set_color(self.scoreP1, self.waitingPlayerColor)
		gui.set_color(self.LabelJ2, self.waitingPlayerColor)
		gui.set_color(self.scoreP2, self.waitingPlayerColor)
		gui.set_color(self.LabelJ3, self.waitingPlayerColor)
		gui.set_color(self.scoreP3, self.waitingPlayerColor)
		gui.set_color(self.LabelJ4, self.waitingPlayerColor)
		gui.set_color(self.scoreP4, self.waitingPlayerColor)
		
	end
	if NumberPlayer == 5 then
		gui.set_color(self.LabelJ1, self.waitingPlayerColor)
		gui.set_color(self.scoreP1, self.waitingPlayerColor)
		gui.set_color(self.LabelJ2, self.waitingPlayerColor)
		gui.set_color(self.scoreP2, self.waitingPlayerColor)
		gui.set_color(self.LabelJ3, self.waitingPlayerColor)
		gui.set_color(self.scoreP3, self.waitingPlayerColor)
		gui.set_color(self.LabelJ4, self.waitingPlayerColor)
		gui.set_color(self.scoreP4, self.waitingPlayerColor)
		gui.set_color(self.LabelJ5, self.waitingPlayerColor)
		gui.set_color(self.scoreP5, self.waitingPlayerColor)
	end
	if NumberPlayer == 6 then
		gui.set_color(self.LabelJ1, self.waitingPlayerColor)
		gui.set_color(self.scoreP1, self.waitingPlayerColor)
		gui.set_color(self.LabelJ2, self.waitingPlayerColor)
		gui.set_color(self.scoreP2, self.waitingPlayerColor)
		gui.set_color(self.LabelJ3, self.waitingPlayerColor)
		gui.set_color(self.scoreP3, self.waitingPlayerColor)
		gui.set_color(self.LabelJ4, self.waitingPlayerColor)
		gui.set_color(self.scoreP4, self.waitingPlayerColor)
		gui.set_color(self.LabelJ5, self.waitingPlayerColor)
		gui.set_color(self.scoreP5, self.waitingPlayerColor)
		gui.set_color(self.LabelJ6, self.waitingPlayerColor)
		gui.set_color(self.scoreP6, self.waitingPlayerColor)
	end

	if joueurEnCours == 1 then
	gui.set_color(self.LabelJ1, self.activeplayercolor)
	gui.set_color(self.scoreP1, self.activeplayercolor)
end


if joueurEnCours == 2 then
	gui.set_color(self.LabelJ2, self.activeplayercolor)
	gui.set_color(self.scoreP2, self.activeplayercolor)
end

if joueurEnCours == 3 then
	gui.set_color(self.LabelJ3, self.activeplayercolor)
	gui.set_color(self.scoreP3, self.activeplayercolor)
end
if joueurEnCours == 4 then
	gui.set_color(self.LabelJ4, self.activeplayercolor)
	gui.set_color(self.scoreP4, self.activeplayercolor)
end
if joueurEnCours == 5 then
	gui.set_color(self.LabelJ5, self.activeplayercolor)
	gui.set_color(self.scoreP5, self.activeplayercolor)
end
if joueurEnCours == 6 then
	gui.set_color(self.LabelJ6, self.activeplayercolor)
	gui.set_color(self.scoreP6, self.activeplayercolor)
end
	
end



function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
	if action.pressed and gui.pick_node(gui.get_node("Exit"), action.x, action.y) then
		gui.play_flipbook(self.Exit, hash("stoneButton_Pressed"))
		playclick()
	end

	if action.released and gui.pick_node(gui.get_node("Exit"), action.x, action.y) then
		gui.play_flipbook(self.Exit, hash("stoneButton_Released"))
		msg.post("main:/CollectionLoader#main", "changeScene", { newScene = "MainMenu" })
	end

	if action.pressed and gui.pick_node(gui.get_node("Touche"), action.x, action.y) then
		if activekeyboard==true then
			gui.play_flipbook(self.Touche, hash("stoneButton_Pressed"))
			playclick()
		end
	end

	if action.released and gui.pick_node(gui.get_node("Touche"), action.x, action.y) then
		if activekeyboard==true then
			gui.play_flipbook(self.Touche, hash("stoneButton_Released"))
			print("envois du message a cible" .. cibleEnCours)
			if cibleEnCours == 1 then
				msg.post("Target1#Target1", "TOUCHE")
			end
			if cibleEnCours == 2 then
				msg.post("Target2#Target2", "TOUCHE")
			end
			if cibleEnCours == 3 then
				msg.post("Target3#Target3", "TOUCHE")
			end
			if cibleEnCours == 4 then
				msg.post("Target4#Target4", "TOUCHE")
			end
			if cibleEnCours == 5 then
				msg.post("Target5#Target5", "TOUCHE")
			end
			if cibleEnCours == 6 then
				msg.post("Target6#Target6", "TOUCHE")
			end
			if cibleEnCours == 7 then
				msg.post("Target7#Target7", "TOUCHE")
			end
		end
	end

	if action.pressed and gui.pick_node(gui.get_node("Rate"), action.x, action.y) then
		if activekeyboard==true then
		gui.play_flipbook(self.Rate, hash("stoneButton_Pressed"))
		playclick()
		end
	end

	if action.released and gui.pick_node(gui.get_node("Rate"), action.x, action.y) then
		if activekeyboard==true then
			gui.play_flipbook(self.Rate, hash("stoneButton_Released"))
			print("envois du message a cible" .. cibleEnCours)
			if cibleEnCours == 1 then
				msg.post("Target1#Target1", "RATE")
			end
			if cibleEnCours == 2 then
				msg.post("Target2#Target2", "RATE")
			end
			if cibleEnCours == 3 then
				msg.post("Target3#Target3", "RATE")
			end
			if cibleEnCours == 4 then
				msg.post("Target4#Target4", "RATE")
			end
			if cibleEnCours == 5 then
				msg.post("Target5#Target5", "RATE")
			end
			if cibleEnCours == 6 then
				msg.post("Target6#Target6", "RATE")
			end
			if cibleEnCours == 7 then
				msg.post("Target7#Target7", "RATE")
			end

		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
